ibatis, mybatis
	+ SQL Mapper framework
	
	+ SQL과 자바객체를 매핑시켜서 데이터베이스 엑세스 작업을 수행한다.
		*SQL 실행에 필요한 값을 포함하고 있는 자바 객체와
		  SQL 실행결과값을 저장하는 자바객체를 
		  각각 지정하고 SQL과 연결하면 Ibatis혹은 mybatis가 SQL을 실행해서 데이터베이스 엑세스 작업을 수행한다.

예시) 
	public class dept {
		int id, String name, int managerId, int locationId;
	}
	
	ibatis
	<insert id="insertDepartment" parameterClass="vo.Dept>
		insert into departments
		(department_id, department_name, manager_id, location_id)
		values
		(#id#,#name#,#managerId#,#locationId#)

	</insert>

	<insert> 태그
		INSERT SQL 구문을 정의하는 태그다.
	id="insertDepartment"
		이 INSERT SQL 구문을 식벼하는 ID 값을 지정한다.

	parameterClass="vo.Dept"
		이 INSERT SQL 구문을 실행하는데 필요한 값을 vo.Dept객체에 담아서 
		파라미터로 제공한다는 것을 지정한다.

	#id# 
		파라미터로 전달받은 vo.dept객체의 id 멤버변수에 저장된 값이 치환될 위치를
		지정한다.

	#name#
		파라미터로 전달받은 vo.dept객체의 name멤버변수에 저장된 값이 치환될 위치를 
		지정한다. 

	실행하기 
		public void insertDepartment(Dept depat) {
				ibatis.insert("insertDepartment", dept);
		}		



	mybatis
	<insert id="insertDepartment" parameterType="vo.Dept>
		insert into departments
		(department_id, department_name, manager_id, location_id)
		values
		(?,?,?,?)

	</insert>


	<insert id="insertJob>
		insert into jobs
		(job_id, job_title, min_salary ,max_salary)
		values
		(#{id},#{name},#{managerId},#{locationId})

	</insert>

---------------------------------------------------------------------------------------------------------------------------------------------------------------

ibatis의 주요 API
	sqlMapClient 인터페이스
		데이터베이스에 대한 CRUD지원 메소드가 정의된 인터페이스다.
		주요 메소드
			Object insert(String sql)
			Object insert(String sql, Object parameterClass)
			* INSERT 구문을 실행하는 메소드다
			* <insert>태그 안에서<selectKey> 태그를 사용하는 경우
		           selectKey태그에서 획득한 값이 반환된다.

			int update(String sql)
			int update(String sql, Object parameterClass)
			* UPDATE 구문을 실행하는 메소드다
			* 변경된 행의 갯수를 반환한다(의미 없음)


	
			int delete(String sql)
			int delete(String sql, Object parameterClass)
			* DELETE 구문을 실행하는 메소드다.
			* 삭제된 행의 갯수를 반환한다(의미 없음)

			
			Object queryforObject(String sql)
			Object queryforObject(String sql, Object parameterClass)
			* 조회 결과가 1건이 조회되는 경우 사용한다.
			* 기본키나 유니크 컬럼이 조회조건으로 사용되는 경우 조회결과가 1건이다.
			   그 외의 경우에는 조회결과 1건 조회되더라도 사용하면 안된다.
			* resultClass  속성에서 지정한 그객체를 생성해서 조회결과를 저장한 다음 반환 한다.
                           조회결과가 없으면 null을 반환한다.

			List queryForList(String sql) 조회결과가 여러건 나오는경우 리스트에 넣어서 반환한다.
			List queryForList(String sql, Object parameter Class)
			* SELECT 구문을 실행하는 메소드다
			* 조회결과가 1건이상 조회되는 경우 사용한다.
			* 조회결과의 유무와 상관없이 List객체를 생성한다.
			   조회결과 하나당 (행마다) resultClass 속성에서 지정한 그 객체를 생성해서 조회결과를
			   저장한 다음 위에서 생성한 List객체에 저장한다.
			   최종적으로 List객체가 반환된다.(List객체에서 resultClass 속성에서 지정한 객체가
								     여러개 저장되어 있다.)
			  조회결과가 하나다 없으면 사이즈가 0인 List객체가 반환된다.(조회 결과 상관없이 list하나를 만든다. 
													null이 반환되지 않는다.(없으면 빈리스트가 반환된다))

			  





---------------------------------------------------------------------------------------------------------------------------------------------------------------ibatis를 이용한 데이터베이스 엑세스

1.ibatis 라이브러리를 웹프로젝트에 추가한다.
		+ ibatis-2.3.726.jar 파일을 웹 프로젝트의 WEB-INF/lib 폴더에 복사한다.

2.ibatis 환결설정 파일을 작성한다.
		+ Connection pool 관련 설정을 추가한다.
		+ ibatis 매퍼파일(매핑된 SQL구문이 포함된 파일)을 등록한다.
3.ibatis 매퍼파일을 작성한다.
		+<insert>, <update>,<delete>,<select> 등의 태그를 이용해서 SQL구문을 작성하고,
		  파라미터클래스와 리절트클래스를 매핑한다.
4. Dao클래스를 작성한다.
		+ Dao 클래스에서는  sqlMapClient객체의 insert(), update(), delete(), queryforObject, queryforObject
		   메소드를 사용해서 아이파디스 매퍼파일에 정의된 sql구문을 실행한다.



---------------------------------------------------------------------------------------------------------------------------------------------------------------

SHA(Secure Hash Algorithm, 암호화된 해시 함수, 단방향 암호화 알고리즘)

 + 해시함수 : 임의의 길이 데이터를 고정된 길이의 데이터로 매핑하는 함수
	  	   해시함수의 실행결과 획득값을 해시값, 해시코드, 해시 체크섬이라고 부른다.
		   해시함수는 결과값을 가지고 원래의 원본 데이터를 알아내기 힘들다는 특징이 있다.

+ SHA : 단방향 암호화 알고리즘이다.
	    MD5의 추약점을 개선/대처하기 위해서 개발된 암호화 알고리즘이다.
	    원본 데이터의 한글자, 한 비트만 바뀌어도 결과값이 완전히 다른 값이 나온다.(눈사태 효과)


회원가입 링크 클릭시 요청 
		registerform.jsp
				//요청 파라미터 fail를 조회한다.
				String fail = request.getParameter("fail");
				fail은 null이다.

회원가입 오류로 인한 재요청
		registerform.jsp?fail=id
			//요청파라미터 fail를 조회한다.
			String fail = request.gerParameter("fail");
			fail은 "id"이다.

registerform.jsp
<%
		String fail = request.getParameter("fail");
%>
	
<%
	if("ID".equals(fail)) {
%>
	<div class=alert alert-danger">
		<strong>회원가입실패</strong> 이미 사용중입니다.
	</div>





































